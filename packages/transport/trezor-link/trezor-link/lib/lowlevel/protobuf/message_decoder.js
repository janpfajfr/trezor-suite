"use strict";

// Helper module for converting Trezor's raw input to
// ProtoBuf's message and from there to regular JSON to trezor.js

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageDecoder = undefined;

var _protobufjs = require("protobufjs");

var ProtoBuf = _interopRequireWildcard(_protobufjs);

var _messages = require("./messages.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

Function.prototype.$asyncbind = function $asyncbind(self, catcher) {
  var resolver = this;

  if (catcher === true) {
    if (!Function.prototype.$asyncbind.EagerThenable) Function.prototype.$asyncbind.EagerThenable = function factory(tick) {
      var _tasks = [];

      if (!tick) {
        try {
          tick = process.nextTick;
        } catch (ex) {
          tick = function tick(p) {
            setTimeout(p, 0);
          };
        }
      }

      function _untask() {
        for (var i = 0; i < _tasks.length; i += 2) {
          var t = _tasks[i + 1],
              r = _tasks[i];

          for (var j = 0; j < t.length; j++) t[j].call(null, r);
        }

        _tasks = [];
      }

      function isThenable(obj) {
        return obj && obj instanceof Object && typeof obj.then === "function";
      }

      function EagerThenable(resolver) {
        function done(inline) {
          var w;
          if (_sync || phase < 0 || (w = _thens[phase]).length === 0) return;

          _tasks.push(result, w);

          _thens = [[], []];
          if (_tasks.length === 2) inline ? _untask() : tick(_untask);
        }

        function resolveThen(x) {
          if (isThenable(x)) return x.then(resolveThen, rejectThen);
          phase = 0;
          result = x;
          done(true);
        }

        function rejectThen(x) {
          if (isThenable(x)) return x.then(resolveThen, rejectThen);
          phase = 1;
          result = x;
          done(true);
        }

        function settler(resolver, rejecter) {
          _thens[0].push(resolver);

          _thens[1].push(rejecter);

          done();
        }

        function toString() {
          return "EagerThenable{" + {
            "-1": "pending",
            0: "resolved",
            1: "rejected"
          }[phase] + "}=" + result.toString();
        }

        this.then = settler;
        this.toString = toString;
        var _thens = [[], []],
            _sync = true,
            phase = -1,
            result;
        resolver.call(null, resolveThen, rejectThen);
        _sync = false;
        done();
      }

      EagerThenable.resolve = function (v) {
        return isThenable(v) ? v : {
          then: function then(resolve, reject) {
            return resolve(v);
          }
        };
      };

      return EagerThenable;
    }();
    return new Function.prototype.$asyncbind.EagerThenable(boundThen);
  }

  if (catcher) {
    if (Function.prototype.$asyncbind.wrapAsyncStack) catcher = Function.prototype.$asyncbind.wrapAsyncStack(catcher);
    return then;
  }

  function then(result, error) {
    try {
      return result && result instanceof Object && typeof result.then === "function" ? result.then(then, catcher) : resolver.call(self, result, error || catcher);
    } catch (ex) {
      return (error || catcher)(ex);
    }
  }

  function boundThen(result, error) {
    return resolver.call(self, result, error);
  }

  boundThen.then = boundThen;
  return boundThen;
};

let MessageDecoder = exports.MessageDecoder = class MessageDecoder {
  // message type number
  constructor(messages, type, data) {
    this.type = type;
    this.data = data;
    this.messages = messages;
  }

  // Returns an info about this message,
  // which includes the constructor object and a name

  // raw data to push to Trezor

  // Builders, generated by reading config
  _messageInfo() {
    const r = this.messages.messagesByType[this.type];
    if (r == null) {
      throw new Error(`Method type not found`, this.type);
    }
    return new MessageInfo(r.constructor, r.name);
  }

  // Returns the name of the message
  messageName() {
    return this._messageInfo().name;
  }

  // Returns the actual decoded message, as a ProtoBuf.js object
  _decodedMessage() {
    const constructor = this._messageInfo().messageConstructor;
    return constructor.decode(this.data);
  }

  // Returns the message decoded to JSON, that could be handed back
  // to trezor.js
  decodedJSON() {
    const decoded = this._decodedMessage();
    const converted = messageToJSON(decoded);

    return JSON.parse(JSON.stringify(converted));
  }
};
let MessageInfo = class MessageInfo {
  constructor(messageConstructor, name) {
    this.messageConstructor = messageConstructor;
    this.name = name;
  }
};

// Converts any ProtoBuf message to JSON in Trezor.js-friendly format

function messageToJSON(message) {
  const res = {};
  const meta = message.$type;

  for (const key in message) {
    const value = message[key];
    if (typeof value === `function`) {
      // ignoring
    } else if (value instanceof _protobufjs.ByteBuffer) {
      const hex = value.toHex();
      res[key] = hex;
    } else if (value instanceof _protobufjs.Long) {
      const num = value.toNumber();
      res[key] = num;
    } else if (Array.isArray(value)) {
      const decodedArr = value.map(i => {
        if (typeof i === `object`) {
          return messageToJSON(i);
        } else {
          return i;
        }
      });
      res[key] = decodedArr;
    } else if (value instanceof ProtoBuf.Builder.Message) {
      res[key] = messageToJSON(value);
    } else if (meta._fieldsByName[key].type.name === `enum`) {
      const enumValues = meta._fieldsByName[key].resolvedType.getChildren();
      res[key] = enumValues.find(e => e.id === value).name;
    } else {
      res[key] = value;
    }
  }
  return res;
}